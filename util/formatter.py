from datetime import datetime

def print_disclaimer():
    print("#Disclaimer\n")
    print("This is an autogenerated overview using a script I wrote in Python. I am a real person utilizing this script to bring you easily digestible information regarding Crypto. If you have any recomendations on what to add or remove, please let me know in the comments so I can continue fine tuning the results")

def print_state_of_the_crypto(market_info, fear_and_greed):
    current_date = datetime.utcnow().strftime("%Y-%m-%d")
    timezone = "UTC"
    fng_current = int(fear_and_greed["data"][0]["value"])
    fng_avg = calculate_fng_avg(fear_and_greed["data"])

    print("#STATE OF THE CRYPTO\n")
    
    print("As of **{} {}**, the Crypto market is in a state of **{}** (**{:.2f}**) (value sourced from: **[{}](https://alternative.me/crypto/fear-and-greed-index/)**).".format(current_date, timezone, get_fear_and_greed_index(fng_current), fng_current, fear_and_greed["name"]), end=" ")
    print("This means that the overall sentiment of the Crypto market is currently **{}**.\n".format(get_market_momentum(fng_current)))

    print_market_overview(market_info)

def print_market_overview(market_info):
    print("##MARKET OVERVIEW\n")
    
    print("- Active CryptoCurrencies: **{:,}**".format(market_info["active_cryptocurrencies"]))
    print("- Bitcoin Market Percentage: **{:.2f}%**".format(float(market_info["bitcoin_percentage_of_market_cap"])*100))
    print("- Total Market Cap: **${:,.2f} USD**".format(market_info["quotes"]["USD"]["total_market_cap"]))
    print("- Total Market Volume 24h: **{:,}**\n".format(market_info["quotes"]["USD"]["total_volume_24h"]))

def print_crypto_news(bitcoin_data, eth_data, alt_data):
    print("#CRYPTO NEWS\n")
    print_news("BITCOIN", bitcoin_data)
    print_news("ETHEREUM", eth_data)
    print_news("ALTS", alt_data)

def print_news(header, data):
    print("##{}\n".format(header))
    for x in data:
        print("- [{}]({})\n".format(x[0], x[1]))

def get_fear_and_greed_index(value):
    if value < 25:
        return "Extreme Fear"
    elif value < 50:
        return "Fear"
    elif value == 50:
        return "Neutral"
    elif value > 75:
        return "Extreme Greed"
    elif value > 50:
        return "Greed"
    return "Sugma"

def get_market_momentum(value):
    if value < 50:
        return "Bearish"
    elif value == 50:
        return "Neutral"
    elif value > 50:
        return "Bullish"

def calculate_fng_avg(values):
    avg = 0
    for x in values:
        avg += int(x["value"])
    return avg / len(values)

def print_tickers(header, tickers, p_range):
    print("#{}\n".format(header))
    for x in tickers:
        format_ticker(x, p_range)
    print("")

def format_ticker(x, p_range):
    percentage_movement = get_percentage_movement(x["quotes"]["USD"][p_range])
    print("- **{}** (**{}**) - **${} USD** (**{}**)".format(x["name"], x["symbol"], get_price(x["quotes"]["USD"]["price"]), percentage_movement))
    print("   - Market Cap: **${:,.2f} USD**".format(x["quotes"]["USD"]["market_cap"]))
    print("   - Volume 24h: **{:,}**".format(x["quotes"]["USD"]["volume_24h"]))
    print("   - Circulating Supply: **{:,}**".format(x["circulating_supply"]))
    print("   - Total Supply: **{:,}**".format(x["total_supply"]))
    print("   - Max Supply: **{:,}**".format(x["max_supply"]))

def get_price(price):
    value = max('{:,.2f}'.format(price),'{:,.6f}'.format(price),key=len)
    value = value.rstrip("0")
    if len(value.rsplit('.')[-1]) == 1:
        value = '{:,.2f}'.format(float(value.strip(" ")))
    return value

def get_percentage_movement(percentage):
    if int(percentage) > 0:
        return "+{:.2f}%".format(percentage)
    
    return "{:.2f}%".format(percentage)